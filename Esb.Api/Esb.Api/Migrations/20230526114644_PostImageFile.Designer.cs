// <auto-generated />
using System;
using Esb.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Esb.Api.Migrations
{
    [DbContext(typeof(EsbDbContext))]
    [Migration("20230526114644_PostImageFile")]
    partial class PostImageFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Esb.Api.Entities.Complex", b =>
                {
                    b.Property<int>("ComplexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplexId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComplexId");

                    b.ToTable("Complexes");
                });

            modelBuilder.Entity("Esb.Api.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Esb.Api.Entities.House", b =>
                {
                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Addition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Daeb")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearBuild")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjectId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseComplex", b =>
                {
                    b.Property<int>("ComplexId")
                        .HasColumnType("int");

                    b.Property<int>("HouseObjectId")
                        .HasColumnType("int");

                    b.HasKey("ComplexId", "HouseObjectId");

                    b.HasIndex("HouseObjectId");

                    b.ToTable("HouseComplexes");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("HouseObjectId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "HouseObjectId");

                    b.HasIndex("HouseObjectId");

                    b.ToTable("HouseDocuments");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseImage", b =>
                {
                    b.Property<int>("HouseObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("HouseObjectId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("HouseImages");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseServiceContract", b =>
                {
                    b.Property<int>("HouseObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceContractId")
                        .HasColumnType("int");

                    b.HasKey("HouseObjectId", "ServiceContractId");

                    b.HasIndex("ServiceContractId");

                    b.ToTable("HouseServiceContracts");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseServiceorder", b =>
                {
                    b.Property<int>("HouseObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceorderId")
                        .HasColumnType("int");

                    b.HasKey("HouseObjectId", "ServiceorderId");

                    b.HasIndex("ServiceorderId");

                    b.ToTable("HouseServiceorders");
                });

            modelBuilder.Entity("Esb.Api.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Thumbnail")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Esb.Api.Entities.ServiceContract", b =>
                {
                    b.Property<int>("ServiceContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceContractId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceContractId");

                    b.ToTable("ServiceContracts");
                });

            modelBuilder.Entity("Esb.Api.Entities.Serviceorder", b =>
                {
                    b.Property<int>("ServiceorderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceorderId"));

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderSoort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceorderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceorderId");

                    b.ToTable("Serviceorders");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseComplex", b =>
                {
                    b.HasOne("Esb.Api.Entities.Complex", "Complex")
                        .WithMany("houseComplexes")
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.House", "House")
                        .WithMany("houseComplexes")
                        .HasForeignKey("HouseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complex");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseDocument", b =>
                {
                    b.HasOne("Esb.Api.Entities.Document", "Document")
                        .WithMany("houseDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.House", "House")
                        .WithMany("houseDocuments")
                        .HasForeignKey("HouseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseImage", b =>
                {
                    b.HasOne("Esb.Api.Entities.House", "House")
                        .WithMany("HouseImages")
                        .HasForeignKey("HouseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.Image", "Image")
                        .WithMany("HouseImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseServiceContract", b =>
                {
                    b.HasOne("Esb.Api.Entities.House", "House")
                        .WithMany("HouseServiceContracts")
                        .HasForeignKey("HouseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.ServiceContract", "ServiceContract")
                        .WithMany("HouseServiceContracts")
                        .HasForeignKey("ServiceContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("ServiceContract");
                });

            modelBuilder.Entity("Esb.Api.Entities.HouseServiceorder", b =>
                {
                    b.HasOne("Esb.Api.Entities.House", "House")
                        .WithMany("HouseServiceorders")
                        .HasForeignKey("HouseObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.Serviceorder", "Serviceorder")
                        .WithMany("HouseServiceorders")
                        .HasForeignKey("ServiceorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Serviceorder");
                });

            modelBuilder.Entity("Esb.Api.Entities.Complex", b =>
                {
                    b.Navigation("houseComplexes");
                });

            modelBuilder.Entity("Esb.Api.Entities.Document", b =>
                {
                    b.Navigation("houseDocuments");
                });

            modelBuilder.Entity("Esb.Api.Entities.House", b =>
                {
                    b.Navigation("HouseImages");

                    b.Navigation("HouseServiceContracts");

                    b.Navigation("HouseServiceorders");

                    b.Navigation("houseComplexes");

                    b.Navigation("houseDocuments");
                });

            modelBuilder.Entity("Esb.Api.Entities.Image", b =>
                {
                    b.Navigation("HouseImages");
                });

            modelBuilder.Entity("Esb.Api.Entities.ServiceContract", b =>
                {
                    b.Navigation("HouseServiceContracts");
                });

            modelBuilder.Entity("Esb.Api.Entities.Serviceorder", b =>
                {
                    b.Navigation("HouseServiceorders");
                });
#pragma warning restore 612, 618
        }
    }
}
