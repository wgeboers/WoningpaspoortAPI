// <auto-generated />
using System;
using Esb.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Esb.Api.Migrations
{
    [DbContext(typeof(EsbDbContext))]
    [Migration("20230509063407_HouseComplex")]
    partial class HouseComplex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComplexHouse", b =>
                {
                    b.Property<int>("ComplexesComplexId")
                        .HasColumnType("int");

                    b.Property<int>("HousesObjectId")
                        .HasColumnType("int");

                    b.HasKey("ComplexesComplexId", "HousesObjectId");

                    b.HasIndex("HousesObjectId");

                    b.ToTable("HouseComplex", (string)null);
                });

            modelBuilder.Entity("DocumentHouse", b =>
                {
                    b.Property<int>("DocumentsDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("HousesObjectId")
                        .HasColumnType("int");

                    b.HasKey("DocumentsDocumentId", "HousesObjectId");

                    b.HasIndex("HousesObjectId");

                    b.ToTable("HouseDocument", (string)null);
                });

            modelBuilder.Entity("Esb.Api.Entities.Complex", b =>
                {
                    b.Property<int>("ComplexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplexId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComplexId");

                    b.ToTable("Complexes");
                });

            modelBuilder.Entity("Esb.Api.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Esb.Api.Entities.House", b =>
                {
                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Addition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Daeb")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearBuild")
                        .HasColumnType("int");

                    b.HasKey("ObjectId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Esb.Api.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Esb.Api.Entities.ServiceContract", b =>
                {
                    b.Property<int>("ServiceContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceContractId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceContractId");

                    b.ToTable("ServiceContracts");
                });

            modelBuilder.Entity("HouseImage", b =>
                {
                    b.Property<int>("HousesObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ImagesImageId")
                        .HasColumnType("int");

                    b.HasKey("HousesObjectId", "ImagesImageId");

                    b.HasIndex("ImagesImageId");

                    b.ToTable("HouseImage", (string)null);
                });

            modelBuilder.Entity("HouseServiceContract", b =>
                {
                    b.Property<int>("HousesObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceContractsServiceContractId")
                        .HasColumnType("int");

                    b.HasKey("HousesObjectId", "ServiceContractsServiceContractId");

                    b.HasIndex("ServiceContractsServiceContractId");

                    b.ToTable("HouseServiceContract", (string)null);
                });

            modelBuilder.Entity("ComplexHouse", b =>
                {
                    b.HasOne("Esb.Api.Entities.Complex", null)
                        .WithMany()
                        .HasForeignKey("ComplexesComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.House", null)
                        .WithMany()
                        .HasForeignKey("HousesObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentHouse", b =>
                {
                    b.HasOne("Esb.Api.Entities.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.House", null)
                        .WithMany()
                        .HasForeignKey("HousesObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseImage", b =>
                {
                    b.HasOne("Esb.Api.Entities.House", null)
                        .WithMany()
                        .HasForeignKey("HousesObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseServiceContract", b =>
                {
                    b.HasOne("Esb.Api.Entities.House", null)
                        .WithMany()
                        .HasForeignKey("HousesObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esb.Api.Entities.ServiceContract", null)
                        .WithMany()
                        .HasForeignKey("ServiceContractsServiceContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
